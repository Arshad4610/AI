j1=5
j2=3
r=4
def app_rule(rule,ju1,ju2):
    if rule==1:
        ju1=j1
    elif rule==2:
        ju2=j2
    elif rule==3:
        ju1=0
    elif rule==4:
        ju2=0
    elif rule==5:
        temp=j1-ju1
        if temp<ju2:
            ju2-=temp
            ju1+=temp
        else:
            ju1+=ju2
            ju2=0
    elif rule==6:
        temp=j2-ju2
        if temp<ju1:
            ju1-=temp
            ju2+=temp
        else:
            ju2+=ju1
            ju1=0
    else:
        print('invalid')
    return ju1,ju2
ju1=ju2=0
s=[[0,0]]
x1=y1=0
i=0
exp=[]
while i<len(s):
    t=[]
    x=s[i][0]
    y=s[i][1]
    exp.append(s[i])
    if s[len(s)-1][0]==r or s[len(s)-1][1]==r:
        print('found')
        break
    for j in range(1,7):
        x1,y1=app_rule(j,x,y)
        t=[x1,y1]
        if t not in s:
            s.append(t)
            print('path',t)
            if x1==r or y1==r:
                break
            print('f:',t)
    print('exp:',exp)
    print('\n')
    i+=1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
path [5, 0]
f: [5, 0]
path [0, 3]
f: [0, 3]
exp: [[0, 0]]


path [5, 3]
f: [5, 3]
path [2, 3]
f: [2, 3]
exp: [[0, 0], [5, 0]]


path [3, 0]
f: [3, 0]
exp: [[0, 0], [5, 0], [0, 3]]


exp: [[0, 0], [5, 0], [0, 3], [5, 3]]


path [2, 0]
f: [2, 0]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3]]


path [3, 3]
f: [3, 3]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0]]


path [0, 2]
f: [0, 2]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0], [2, 0]]


path [5, 1]
f: [5, 1]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0], [2, 0], [3, 3]]


path [5, 2]
f: [5, 2]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0], [2, 0], [3, 3], [0, 2]]


path [0, 1]
f: [0, 1]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0], [2, 0], [3, 3], [0, 2], [5, 1]]


path [4, 3]
exp: [[0, 0], [5, 0], [0, 3], [5, 3], [2, 3], [3, 0], [2, 0], [3, 3], [0, 2], [5, 1], [5, 2]]


found
