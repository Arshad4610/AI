from collections import deque 
def is_valid_state(state): 
    m_left, c_left, m_right, c_right, boat = state 
    if (m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0 or 
        (m_left != 0 and m_left < c_left) or 
        (m_right != 0 and m_right < c_right)): 
        return False 
    return True 
 
def generate_next_states(state): 
    m_left, c_left, m_right, c_right, boat = state 
    possible_states = [] 
     
    if boat == 'left': 
        for m in range(3): 
            for c in range(3): 
                if m + c > 2 or m + c == 0: 
                    continue 
                new_state = (m_left - m, c_left - c, m_right + m, c_right + c, 'right') 
                if is_valid_state(new_state): 
                    possible_states.append(new_state) 
    else: 
        for m in range(3): 
            for c in range(3): 
                if m + c > 2 or m + c == 0: 
                    continue 
                new_state = (m_left + m, c_left + c, m_right - m, c_right - c, 'left') 
                if is_valid_state(new_state): 
                    possible_states.append(new_state) 
     
    return possible_states
def bfs(start_state, goal_state): 
    visited = set() 
    queue = deque([(start_state, [])]) 
    j=1 
     
    while queue: 
        current_state, path = queue.popleft() 
        visited.add(current_state) 
         
        if current_state == goal_state: 
            print("Goal state reached") 
            print("Path is :") 
            return path
        for next_state in generate_next_states(current_state): 
            if next_state not in visited: 
                queue.append((next_state, path + [next_state])) 
                visited.add(next_state) 
        print(f"At step {j}") 
        print("Frontier is : ",queue[0][0]) 
        print("Explored is :",visited) 
        j+=1 
     
    return []
start_state = (3, 3, 0, 0, 'left') 
goal_state = (0, 0, 3, 3, 'right') 
 
solution = bfs(start_state, goal_state) 
if solution: 
    for i, state in enumerate(solution): 
        print(f"Step {i+1}: {state}") 
else: 
    print("No solution found.")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
At step 1
Frontier is :  (3, 2, 0, 1, 'right')
Explored is : {(3, 2, 0, 1, 'right'), (3, 3, 0, 0, 'left'), (2, 2, 1, 1, 'right'), (3, 1, 0, 2, 'right')}
At step 2
Frontier is :  (3, 1, 0, 2, 'right')
Explored is : {(3, 2, 0, 1, 'right'), (3, 3, 0, 0, 'left'), (2, 2, 1, 1, 'right'), (3, 1, 0, 2, 'right')}
At step 3
Frontier is :  (2, 2, 1, 1, 'right')
Explored is : {(3, 1, 0, 2, 'right'), (3, 3, 0, 0, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 4
Frontier is :  (3, 2, 0, 1, 'left')
Explored is : {(3, 1, 0, 2, 'right'), (3, 3, 0, 0, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 5
Frontier is :  (3, 0, 0, 3, 'right')
Explored is : {(3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (3, 3, 0, 0, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 6
Frontier is :  (3, 1, 0, 2, 'left')
Explored is : {(3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (3, 3, 0, 0, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 7
Frontier is :  (1, 1, 2, 2, 'right')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (3, 3, 0, 0, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 8
Frontier is :  (2, 2, 1, 1, 'left')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (3, 3, 0, 0, 'left'), (2, 2, 1, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 9
Frontier is :  (0, 2, 3, 1, 'right')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (3, 3, 0, 0, 'left'), (2, 2, 1, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 10
Frontier is :  (0, 3, 3, 0, 'left')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (0, 3, 3, 0, 'left'), (3, 3, 0, 0, 'left'), (2, 2, 1, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 11
Frontier is :  (0, 1, 3, 2, 'right')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (3, 0, 0, 3, 'right'), (0, 3, 3, 0, 'left'), (3, 3, 0, 0, 'left'), (0, 1, 3, 2, 'right'), (2, 2, 1, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 12
Frontier is :  (0, 2, 3, 1, 'left')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (1, 1, 2, 2, 'left'), (3, 0, 0, 3, 'right'), (0, 3, 3, 0, 'left'), (3, 3, 0, 0, 'left'), (0, 1, 3, 2, 'right'), (2, 2, 1, 1, 'left'), (0, 2, 3, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (3, 2, 0, 1, 'right')}
At step 13
Frontier is :  (1, 1, 2, 2, 'left')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (1, 1, 2, 2, 'left'), (3, 0, 0, 3, 'right'), (0, 3, 3, 0, 'left'), (3, 3, 0, 0, 'left'), (0, 1, 3, 2, 'right'), (2, 2, 1, 1, 'left'), (0, 2, 3, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (0, 0, 3, 3, 'right'), (3, 2, 0, 1, 'right')}
At step 14
Frontier is :  (0, 0, 3, 3, 'right')
Explored is : {(1, 1, 2, 2, 'right'), (3, 1, 0, 2, 'right'), (1, 1, 2, 2, 'left'), (3, 0, 0, 3, 'right'), (0, 3, 3, 0, 'left'), (3, 3, 0, 0, 'left'), (0, 1, 3, 2, 'right'), (2, 2, 1, 1, 'left'), (0, 2, 3, 1, 'left'), (3, 1, 0, 2, 'left'), (3, 2, 0, 1, 'left'), (2, 2, 1, 1, 'right'), (0, 2, 3, 1, 'right'), (0, 0, 3, 3, 'right'), (3, 2, 0, 1, 'right')}
Goal state reached
Path is :
Step 1: (3, 1, 0, 2, 'right')
Step 2: (3, 2, 0, 1, 'left')
Step 3: (3, 0, 0, 3, 'right')
Step 4: (3, 1, 0, 2, 'left')
Step 5: (1, 1, 2, 2, 'right')
Step 6: (2, 2, 1, 1, 'left')
Step 7: (0, 2, 3, 1, 'right')
Step 8: (0, 3, 3, 0, 'left')
Step 9: (0, 1, 3, 2, 'right')
Step 10: (0, 2, 3, 1, 'left')
Step 11: (0, 0, 3, 3, 'right')
