def rule(l,r,i):
    if r==1:
        if l[0]==1:
            return [0,l[1],'L'],i
        else:
            return [l[0],l[1],'R'],i
    if r==2:
        return [l[0],l[1],'R'],i
    if r==3:
        if l[1]==1:
            return [l[0],0,'R'],i
        else:
            return [l[0],l[1],'L'],i
    if r==4:
        return [l[0],l[1],'L'],i
l=[[1,1,'L']]
i=0
k=l[0]
node=[-1]
while i<=(len(l)-1):
    if k[0]==0  and k[1]==0:
          break
    if l[i][2]=='L':
        k,n=rule(l[i],1,i)
        if k not in l:
            l.append(k)
            node.append(n)
        if k[0]==0 and k[1]==0:
            break
        k,n=rule(l[i],2,i)
        if k not in l:
            l.append(k)
            node.append(n)
        if k[0]==0 and k[1]==0:
            break
    else:
        k,n=rule(l[i],3,i)
        if k not in l:
            l.append(k)
            node.append(n)
        if k[0]==0 and k[1]==0:
            break
        k,n=rule(l[i],4,i)
        if k not in l:
            l.append(k)
            node.append(n)
        if k[0]==0 and k[1]==0:
            break
    i+=1
print(l)
print("Parent:",node)
p=[]
i=len(node)-1
p.append(len(node)-1)
while i>0:
    p.append(node[i])
    i=node[i]
print("Path:",p[::-1])
print("Frontier:",len(l))      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
OUTPUT:
[[1, 1, 'L'], [0, 1, 'L'], [1, 1, 'R'], [0, 1, 'R'], [1, 0, 'R'], [0, 0, 'R']]
Parent: [-1, 0, 0, 1, 2, 3]
Path: [0, 1, 3, 5]
Frontier: 6
